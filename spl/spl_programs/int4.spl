

// extract sys call number from user stack
alias userSP R1;
alias sysCallNumber R2;
alias fileName R3;
alias permission R4;
alias currentPID R7;
alias modeFlag R8;
alias retVal R9;

userSP = SP;
sysCallNumber =[[PTBR + 2*(userSP - 5)/512]*512 + (userSP - 5)%512];
fileName =[[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];
permission =[[PTBR + 2*(userSP - 3)/512]*512 + (userSP - 3)%512];
currentPID = [SYSTEM_STATUS_TABLE + 1];
modeFlag = PROCESS_TABLE + currentPID*16+ 9 ;
retVal = [PTBR + 2*(userSP - 1)/512]*512 + (userSP - 1)%512 ;

// switch to kernel stack
[PROCESS_TABLE + currentPID * 16 +13] = SP;
SP = [PROCESS_TABLE + currentPID*16 +11]*512 -1;

// Create File
if ( sysCallNumber == 1) then
    // set mode flag 
    [ modeFlag ] = 1;

    alias i R5;
    i = 0;

    while ( i < MAX_FILE_NUM ) do
        if ( [ INODE_TABLE + i*16 + 1] == fileName) then
            // store return value 0
            [retVal] = 0;
            [ modeFlag ] = 0;
            SP = userSP;
            ireturn;
        endif;
        i = i+1;
    endwhile;

    i = 0;

    while ( i < MAX_FILE_NUM ) do
        if ( [ INODE_TABLE + i*16 + 1] == -1 ) then
            break;
        endif;
        i = i+1;
    endwhile;

    if (i == MAX_FILE_NUM) then
        // store return value -1 , no free entry found
        [retVal] = -1;
        [ modeFlag] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias inodeEntry R2;
    inodeEntry = INODE_TABLE + i*16;

    [ inodeEntry + 0 ] = DATA;
    [ inodeEntry + 1 ] = fileName;
    [ inodeEntry + 2 ] = 0;
    [ inodeEntry + 3 ] = [PROCESS_TABLE + i*16 + 3];
    [ inodeEntry + 4 ] = permission;
    [ inodeEntry + 8 ] = -1;
    [ inodeEntry + 9 ] = -1;
    [ inodeEntry + 10 ] = -1;
    [ inodeEntry + 11 ] = -1;

    [ ROOT_FILE + i*8 + 0] = fileName;
    [ ROOT_FILE + i*8 + 1] = 0;
    [ ROOT_FILE + i*8 + 2] = 2;
    [ ROOT_FILE + i*8 + 3] = [USER_TABLE + [PROCESS_TABLE + i*16 + 3]*2];
    [ ROOT_FILE + i*8 + 4] = permission;

    // store return value 0 
    [retVal] = 0;
endif;

// Delete File
if ( sysCallNumber == 4) then
    // set mode flag 
    [ modeFlag] = 4;

    alias i R5;
    i = 0;

    while ( i < MAX_FILE_NUM ) do
        if ( [ INODE_TABLE + i*16 + 1] == fileName) then
            break;
        endif;

        i = i+1;
    endwhile;

    if( i == MAX_FILE_NUM ) then
        print("Not found");
        // store return value 0 
        [retVal] = 0;
        [ modeFlag] = 0;
        SP = userSP;
        ireturn;
    endif;

    if ( [ INODE_TABLE + i*16 + 0] != DATA ) then
        print("Not DATA file");
        // store return value -1 
        [retVal] = -1;
        [ modeFlag] = 0;
        SP = userSP;
        ireturn;
    endif;

    if ( [ INODE_TABLE + i*16 + 4] == 0 ) then
        if ( [PROCESS_TABLE + currentPID*16 + 3] != 0 && [INODE_TABLE + i*16 + 3] != currentPID) then
            // store return value -1 
            print("Permission Denied");
            [retVal] = -1;
            [ modeFlag] = 0;
            SP = userSP;
            ireturn;
        endif;
    endif;

    // Acquire Inode
    multipush(R1,R2,R3,R4,R5,R7,R8,R9);
    R1 = 4;
    R2= i;
    R3= currentPID;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R7,R8,R9);

    if ([FILE_STATUS_TABLE + i*4 + 1] != -1) then
        
        // Release Inode
        multipush(R1,R2,R3,R4,R5,R7,R8,R9);
        R1 = 5;
        R2= i;
        R3= [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R7,R8,R9);

        // store return value -2
        [retVal] = -2;
        [ modeFlag] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias k R6;
    k = 0;
    while ( k < 4 ) do
        if ( [ INODE_TABLE + i*16 + 8 + k ] != -1 ) then
            [ BUFFER_TABLE + ([ INODE_TABLE + i*16 + 8 + k ]%4)*4 + 1] = 0;
        endif;

        // release block
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
        R1 = 4;
        R2 = [ INODE_TABLE + i*16 + 8 + k ];
        R3 = currentPID;
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

        k = k+1;
    endwhile;

    // invalidate inode and root file tables
    [ INODE_TABLE + i*16 + 1] = -1;
    [ ROOT_FILE + i*8 + 0] = -1;

    // release Inode
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
    R1 = 5;
    R2= i;
    R3= currentPID;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

    // store return value 0 
    [retVal] = 0;
endif;

// reset mode flag
[ modeFlag ] = 0;

// switch to user stack
SP = userSP;
ireturn;


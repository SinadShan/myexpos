// BOOT MODULE from disk to memory
loadi(54,67);
loadi(55,68);

// scheduler from disk to memory
loadi(50,63);
loadi(51,64);

// idle process from disk to memory
loadi(69,11);
loadi(70,12);


// set SP to idle process kernel stack (to call BOOT_MODULE)
SP =  82*512 - 1; // 82 is idle process user area page number

call BOOT_MODULE;

// setting process table for IDLE
[PROCESS_TABLE + 4] = RUNNING;      // set process state to RUNNING
[PROCESS_TABLE + 11] = 82;      // user area page number 
[PROCESS_TABLE + 13] = 8*512;   // UPTR
[PROCESS_TABLE + 12] = 0;       // KPTR
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;   // PTBR in process table
[PROCESS_TABLE + 15] = 10;      // PTLR in process table
[PROCESS_TABLE + 1] = 0;        // store pid

// all other processes are terminated 
     
[PROCESS_TABLE + 16*2  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*3  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*4  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*5  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*6  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*7  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*8  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*9  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*10  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*11  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*12  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*13  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*14  + 4] = TERMINATED;      
[PROCESS_TABLE + 16*15  + 4] = TERMINATED;      

// setting up idle process page-table-entries

PTBR=PAGE_TABLE_BASE;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100"; // small code so only one page required
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

PTLR = 10;

// initialise idle stack with address of first instruction to be executed
[81 * 512] = [69*512 + 1];

SP = 8*512;

[SYSTEM_STATUS_TABLE + 1] = 0;  // store pid in SYSTEM_STATUS_TABLE

ireturn;


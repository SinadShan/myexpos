
// module 2
alias functionNum R1;

// Get free page
if( functionNum == 1 ) then

    // wait_mem_count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    // busy wait while mem free count is zero
    while( [SYSTEM_STATUS_TABLE + 2] == 0 ) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2);
    endwhile ;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    alias i R3;
    i = 76;
    while( i< MAX_MEM_PAGE) do
        if([MEMORY_FREE_LIST + i] == 0) then
            [MEMORY_FREE_LIST + i] = 1;
            break;
        endif;
        i = i + 1;
    endwhile;

    if ( (128 - [SYSTEM_STATUS_TABLE + 2]) < [72*512 + 0] || [72*512 + 0] == 0) then
        [72*512 + 0] = 128 - [SYSTEM_STATUS_TABLE + 2];
    endif;

    R0 = i;
    return;
endif ;

// Release Page
if( functionNum == 2 ) then
    alias pageno R2;
    [MEMORY_FREE_LIST + pageno] = [MEMORY_FREE_LIST + pageno] - 1;

    if([MEMORY_FREE_LIST + pageno] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
        alias i R3;
        i = 0;
        while(i<16) do
            if([PROCESS_TABLE +i*16 + 4] == WAIT_MEM) then
                [PROCESS_TABLE +i*16 + 4] = READY;
            endif;
            i = i + 1;
        endwhile;
    endif;

    return;
endif;

// Get Code Page
if( functionNum == 5 ) then
    alias i R3;
    i = 0;
    alias j R4;
    while(i<16) do
        j = 4;
        while(j<8) do
            if ( [DISK_MAP_TABLE + i*10 + j] == R2 &&  [PAGE_TABLE_BASE + i*20 + 8 + (j-4)*2] != -1) then
                R0 = [PAGE_TABLE_BASE + i*20 + 8 + (j-4)*2];
                [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + i*20 + 8 + (j-4)*2]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + i*20 + 8 + (j-4)*2]] + 1;
                return;
            endif;
            j = j + 1;
        endwhile;
        i = i + 1;
    endwhile;

    if(i==16) then
        multipush(R1,R2,R3,R4);
        R1 = 1;

        // get free page
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4);
        
        multipush(R0,R1,R2,R3,R4);
        R4 = R2; // store block number in R5

        R1 = 2;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = R0;
        // R4 is already set

        // disk_load
        call DEVICE_MANAGER;

        multipop(R0,R1,R2,R3,R4);
        breakpoint;
        return ;
    endif;
endif ;

// release block
if( functionNum == 4 ) then
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
    return;
endif ;

// module 1

alias functionNum R1;
alias currentPID R2;
alias userAreaPage R3;


// get pcb entry
if(functionNum == 1) then
    alias i R4;
    i = 0;
    // loop through process tables to find a free one
    while(i<16) do
        if([PROCESS_TABLE + i*16 + 4] == TERMINATED) then
            [PROCESS_TABLE + i*16 + 4] = ALLOCATED;
            [PROCESS_TABLE + 16*i + 1] = i;
            [PROCESS_TABLE + 16*i + 14] = PAGE_TABLE_BASE + 20*i;
            [PROCESS_TABLE + 16*i + 15] = 10;
            R0 = i;
            return;
        endif;
        i = i+1;
    endwhile;
    R0 = -1;
    return;
endif;

// free User Area Page
if(functionNum == 2) then
    userAreaPage = [PROCESS_TABLE + R2*16 + 11];

    alias i R4;
    i = 0;

    while ( i < 16 ) do
        alias j R5;
        j = [PROCESS_TABLE + currentPID*16 + 11]*512 + RESOURCE_TABLE_OFFSET + i;
        if ( [j] == 1) then
            
            // release semaphore 
            multipush(R1,R2,R3,R4,R5);
            R1 = 7;
            R2 = [j + 1];
            R3 = [SYSTEM_STATUS_TABLE + 1]; 
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4,R5);

        endif;

        if ( [j] == 0) then
            
            // release file 
            multipush(R1,R2,R3,R4,R5);
            R1 = 4;
            R2 = [j + 1]; 
            call FILE_MANAGER;
            multipop(R1,R2,R3,R4,R5);
            
        endif;
        i = i + 2;
    endwhile;
    multipush(R1,R2,R3,R4,R5);

    R1 = 2;
    R2 = userAreaPage;
    call MEMORY_MANAGER;

    multipop(R1,R2,R3,R4,R5);

    return;
endif;

// exit
if( functionNum == 3 ) then

    // Free Page Table
    multipush(R1,R2);
    R1 = 4;
    call PROCESS_MANAGER;

    // Free UAPage
    R1 = 2;
    call PROCESS_MANAGER;

    multipop(R1,R2);

    if ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + 1]*16 + 9] != 9) then
        alias i R4;
        i = 1;
        while( i<16 ) do
            if( [PROCESS_TABLE + i*16 + 4] == WAIT_PROCESS &&  [PROCESS_TABLE + i*16 + 5] == [SYSTEM_STATUS_TABLE + 1]) then
                [PROCESS_TABLE + i*16 + 4] = READY;
            endif ;

            if([PROCESS_TABLE + i*16 + 2] == [SYSTEM_STATUS_TABLE + 1]) then
                [PROCESS_TABLE + i*16 + 2] = -1;
            endif;

            i = i+ 1;
        endwhile;
    endif;

    [PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
    return;
endif ;

// Free page table
if( functionNum == 4) then
    
    // heap 1
    alias j R4;
    j = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;
    if([j +2] != -1) then
        multipush(R1,R2,R3,R4);

        R1 = 4;
        R2 = [j +2];
        R3 = [SYSTEM_STATUS_TABLE + 1];

        //call release block
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4);
        [ j +2] = -1;
    endif;

    // heap 2
    if([j +3] != -1) then
        multipush(R1,R2,R3,R4);

        R1 = 4;
        R2 = [j +3];
        R3 = [SYSTEM_STATUS_TABLE + 1];

        //call release block
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4);
        [ j +3] = -1;
    endif;

    // stack 1
    if([j +8] != -1) then
        multipush(R1,R2,R3,R4);

        R1 = 4;
        R2 = [j +8];
        R3 = [SYSTEM_STATUS_TABLE + 1];

        //call release block
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4);
        [ j +8] = -1;
    endif;

    // stack 2
    if([j +9] != -1) then
        multipush(R1,R2,R3,R4);

        R1 = 4;
        R2 = [j +9];
        R3 = [SYSTEM_STATUS_TABLE + 1];

        //call release block
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4);
        [ j +9] = -1;
    endif;

    // free disk map table
    alias k R4;
    k = 2;
    while( k<10 ) do
        [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 +k] = -1;
        k = k + 1;
    endwhile ;


    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias i R3;
    i = 4;
    while( i<20 ) do
        if([PTBR + i] != -1) then

            multipush(R1,R2,R3);
            // Release Page
            R1 = 2;
            R2 = [PTBR + i];
            call MEMORY_MANAGER;
            multipop(R1,R2,R3);
            
            [PTBR + i] = -1;
            [PTBR + i + 1] = "0000";

        endif;
        i = i+2;

    endwhile ;
    return;

endif;

// Kill All
if (functionNum == 5) then
    alias i R3;
    i = 0;
    while ( i < MAX_FILE_NUM ) do
        if ( [INODE_TABLE + i*16 + 1] != -1 ) then

            // Acquire Inode
            multipush(R1,R2,R3);
            R1 = 4;
            R2 = i;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);

        endif;
        i = i+1;
    endwhile;
    // print("Acquired Inodes");
    i = 2;
    while ( i < MAX_PROC_NUM - 1) do
        // if pid == PID in swapper daemon
        // continue
        
        if ( i != currentPID && [PROCESS_TABLE + i*16 + 4] != TERMINATED ) then

            // Exit Process
            multipush(R1,R2,R3);
            R1 = 3;
            R2 = i;
            call PROCESS_MANAGER;
            multipop(R1,R2,R3);
        endif;

        i = i + 1;
    endwhile;

    i = 0;
    while ( i < MAX_FILE_NUM ) do
        if ( [INODE_TABLE + i*16 + 1] != -1 ) then

            // Release Inode
            multipush(R1,R2,R3);
            R1 = 5;
            R3 = currentPID;
            R2 = i;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i+1;

    endwhile;

    return;
endif;
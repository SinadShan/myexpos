
alias functionNum R1;
alias currentPID R2;

// disk load function
if (functionNum == 2) then
    alias pageNo R3; 
    alias blockNo R4;
    multipush(R1,R2,R3,R4);

    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;

    multipop(R1,R2,R3,R4);

    [DISK_STATUS_TABLE  + 0] = 1;
    [DISK_STATUS_TABLE  + 1] = 0;
    [DISK_STATUS_TABLE  + 2] = pageNo;
    [DISK_STATUS_TABLE  + 3] = blockNo;
    [DISK_STATUS_TABLE  + 4] = [SYSTEM_STATUS_TABLE + 1];

    load(pageNo,blockNo);

    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_DISK;
    
    multipush(R1,R2,R3);
    call SCHEDULER;
    multipop(R1,R2,R3);

    // print "device manager";
    // breakpoint;
    return;

endif;

// disk store 
if( functionNum == 1 ) then
    alias currentPID R2;
    alias pageNo R3;
    alias blockNo R4;

    multipush(R1,R2,R3,R4);
    R1 = 3;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    [DISK_STATUS_TABLE + 0] = 1;
    [DISK_STATUS_TABLE + 1] = 1;
    [DISK_STATUS_TABLE + 2] = pageNo;
    [DISK_STATUS_TABLE + 3] = blockNo;
    [DISK_STATUS_TABLE + 4] = currentPID;

    store(pageNo,blockNo);

    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    [PROCESS_TABLE + currentPID*16 + 5] = -1;

    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);

    return;
    
endif;


// Terminal Write
if( functionNum == 3 ) then
    multipush(R0,R1,R2,R3,R4);
    R1 = 8;
    R2 = currentPID;

    call RESOURCE_MANAGER;
    multipop(R0,R1,R2,R3,R4);
    print R3;
    // breakpoint;

    multipush(R0,R1,R2,R3,R4);
    R1=9;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    R5 = R0; // R0 contains return value
    multipop(R0,R1,R2,R3,R4);
    return;
endif ;

// Terminal Read
if( functionNum == 4 ) then

    // print "called read";
    // breakpoint;
    multipush(R0,R1,R2,R3);
    R1 = 8;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R0,R1,R2,R3);
    
    // breakpoint;
    read;

    [PROCESS_TABLE + 16*currentPID + 4] = WAIT_TERMINAL;
    multipush(R0,R1,R2,R3);
    call SCHEDULER;
    multipop(R0,R1,R2,R3);

    // value from input buffer field of PROCESS_TABLE to word_address passed
    [[PTBR + 2 * (R3/ 512)] * 512 + (R3 % 512)] = [PROCESS_TABLE + 16*currentPID + 8];
    return;
    
endif;
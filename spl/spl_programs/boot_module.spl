// library from disk to memory
loadi(63,13);
loadi(64,14);

// disk free list from disk to memory
loadi(61,2);

// inode table from disk to memory
loadi(59,3);
loadi(60,4);

// int 8 (fork) module from disk to memory
loadi(18,31);
loadi(19,32);

// int 9 module from disk to memory
loadi(20,33);
loadi(21,34);

// int 10 module from disk to memory
loadi(22,35);
loadi(23,36);

// int 11 module from disk to memory
loadi(24,37);
loadi(25,38);

// int 13 module from disk to memory
loadi(28,41);
loadi(29,42);

// int 14 module from disk to memory
loadi(30,43);
loadi(31,44);

// int 15 module from disk to memory
loadi(32,45);
loadi(33,46);

// int 7 (print to console) from disk to memory
loadi(16,29);
loadi(17,30);

// int 6 (read from terminal) from disk to memory
loadi(14,27);
loadi(15,28);

// disk interrupt from disk to memory
loadi(6,19);
loadi(7,20);

// console interrupt from disk to memory
loadi(8,21);
loadi(9,22);

// module 0 (RESOURCE_MANAGER) from disk to memory
loadi(40,53);
loadi(41,54);

// module 1 (PROCESS_MANAGER) from disk to memory
loadi(42,55);
loadi(43,56);

// module 2 (MEMORY_MANAGER) from disk to memory
loadi(44,57);
loadi(45,58);

// module 4 (DEVICE_MANAGER) from disk to memory
loadi(48,61);
loadi(49,62);

// exception handler from disk to memory
loadi(2, 15);
loadi(3, 16);

// timer interrupt from disk to memory
loadi(4,17);
loadi(5,18);

// init process from disk to memory
loadi(65,7);
loadi(66,8);

// second user process from disk to memory
// loadi(83,69);

// third user process from disk to memory
// loadi(84,70);

// setting up page table for third user process
// PTBR = PAGE_TABLE_BASE+60;

// //Library
// [PTBR+0] = 63;
// [PTBR+1] = "0100";
// [PTBR+2] = 64;
// [PTBR+3] = "0100";

// //Heap
// [PTBR+4] = 90;
// [PTBR+5] = "0110";
// [PTBR+6] = 91;
// [PTBR+7] = "0110";

// //Code
// [PTBR+8] = 84;
// [PTBR+9] = "0100";
// [PTBR+10] = -1;
// [PTBR+11] = "0100";
// [PTBR+12] = -1;
// [PTBR+13] = "0000";
// [PTBR+14] = -1;
// [PTBR+15] = "0000";

// //Stack
// [PTBR+16] = 92;
// [PTBR+17] = "0110";
// [PTBR+18] = 93;
// [PTBR+19] = "0110";

// setting up page table for second user process

// PTBR = PAGE_TABLE_BASE+40;

// //Library
// [PTBR+0] = 63;
// [PTBR+1] = "0100";
// [PTBR+2] = 64;
// [PTBR+3] = "0100";

// //Heap
// [PTBR+4] = 85;
// [PTBR+5] = "0110";
// [PTBR+6] = 86;
// [PTBR+7] = "0110";

// //Code
// [PTBR+8] = 83;
// [PTBR+9] = "0100";
// [PTBR+10] = -1;
// [PTBR+11] = "0100";
// [PTBR+12] = -1;
// [PTBR+13] = "0000";
// [PTBR+14] = -1;
// [PTBR+15] = "0000";

// //Stack
// [PTBR+16] = 87;
// [PTBR+17] = "0110";
// [PTBR+18] = 88;
// [PTBR+19] = "0110";

// setting up page table for init

PTBR = PAGE_TABLE_BASE+20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// setting up process table for third process
// [PROCESS_TABLE +48+ 4] = CREATED;      // set process state to CREATED
// [PROCESS_TABLE +48+ 11] = 94;   // user area for init program
// [PROCESS_TABLE +48+ 13] = 8*512;   // UPTR
// [PROCESS_TABLE +48+ 12] = 0;       // KPTR
// [PROCESS_TABLE +48+ 14] = PAGE_TABLE_BASE+60;   // PTBR in process table
// [PROCESS_TABLE +48+ 15] = 10;   // PTLR in process table
// [PROCESS_TABLE +48+ 1] = 3;     // store pid


//setting up process table for second process
// [PROCESS_TABLE +32+ 4] = CREATED;      // set process state to CREATED
// [PROCESS_TABLE +32+ 11] = 89;   // user area for init program
// [PROCESS_TABLE +32+ 13] = 8*512;   // UPTR
// [PROCESS_TABLE +32+ 12] = 0;       // KPTR
// [PROCESS_TABLE +32+ 14] = PAGE_TABLE_BASE+40;   // PTBR in process table
// [PROCESS_TABLE +32+ 15] = 10;   // PTLR in process table
// [PROCESS_TABLE +32+ 1] = 2;     // store pid

//setting up process table for INIT
[PROCESS_TABLE +16+ 4] = CREATED;      // set process state to CREATED
[PROCESS_TABLE +16+ 11] = 80;   // user area for init program
[PROCESS_TABLE +16+ 13] = 8*512;   // UPTR
[PROCESS_TABLE +16+ 12] = 0;       // KPTR
[PROCESS_TABLE +16+ 14] = PAGE_TABLE_BASE+20;   // PTBR in process table
[PROCESS_TABLE +16+ 15] = 10;   // PTLR in process table
[PROCESS_TABLE +16+ 1] = 1;     // store pid

// setting up disk map table for init process
[ DISK_MAP_TABLE + 10 + 2] = -1;
[ DISK_MAP_TABLE + 10 + 3] = -1;
[ DISK_MAP_TABLE + 10 + 4] = 65;
[ DISK_MAP_TABLE + 10 + 5] = 66;
[ DISK_MAP_TABLE + 10 + 6] = -1;
[ DISK_MAP_TABLE + 10 + 7] = -1;
[ DISK_MAP_TABLE + 10 + 8] = -1;
[ DISK_MAP_TABLE + 10 + 9] = -1;

alias i R3;
i = 0;
while( i<MAX_MEM_PAGE) do
    if( i<83 ) then
        [MEMORY_FREE_LIST + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif ;
    i = i + 1;
endwhile ;

i = 0;
while( i<MAX_SEM_COUNT*4) do
    [ SEMAPHORE_TABLE + i] = -1;
    [ SEMAPHORE_TABLE + i + 1] = 0;
    i = i +4;
endwhile;

// initialise per-process resource table of init
alias k R4;
k = 0;

while(k<16) do
        [([PROCESS_TABLE +16+ 11]+1)*512 -16 +k] = -1;
        k = k+1;
endwhile;

// Initialize WAIT_MEM_COUNT and MEM_FREE_COUNT (number of free pages 76-127)
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 45;

// initialise status field in the disk status table
[DISK_STATUS_TABLE] = 0;

[76 * 512] = [65*512 + 1];
[87 * 512] = [83*512 + 1];
[92 * 512] = [84*512 + 1];

// no process is using terminal now
[TERMINAL_STATUS_TABLE + 0] = 0;

return;
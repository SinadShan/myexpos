
alias functionNum R1;
alias currentPID R2;

// print "resource_manager";
// breakpoint;

// Acquire Disk
if( functionNum == 3 ) then

    while( [DISK_STATUS_TABLE] == 1 ) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2);
    endwhile;

    [DISK_STATUS_TABLE + 0] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;

    return;
 
endif;

// Acquire Inode
if (functionNum == 4) then
    alias inodeIndex R2;
    alias currentPID R3;

    while ( [ FILE_STATUS_TABLE + inodeIndex*4 + 0 ] != -1 ) do
        [ PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_FILE;
        [ PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 5] = inodeIndex;

        multipush(R1,R2,R3);
        call SCHEDULER;
        multipop(R1,R2,R3);

    endwhile;

    if ([INODE_TABLE + inodeIndex*16 + 1] == -1) then
        R0 = -1;
        return;
    endif;

    [FILE_STATUS_TABLE + inodeIndex*4 + 0] = currentPID;

    R0 = 0;
    return;
endif;

// Release Inode
if (functionNum == 5) then
    alias inodeIndex R2;
    alias currentPID R3;

    if ([FILE_STATUS_TABLE + inodeIndex*4 + 0] != currentPID) then
        R0 = -1;
        return;
    endif;

    [FILE_STATUS_TABLE + inodeIndex*4 + 0] = -1;

    alias i R4;
    i = 0;

    while (i<16) do
        if ( [PROCESS_TABLE + i*16 + 4] == WAIT_FILE) then
            [PROCESS_TABLE + i*16 + 4] = READY;
            [PROCESS_TABLE + i*16 + 5] = -1;
        endif;
        i = i+1;
    endwhile;

    return;
endif;

// Acquire terminal
if( functionNum == 8 ) then
    while( [TERMINAL_STATUS_TABLE + 0] == 1) do
        [PROCESS_TABLE + (16*currentPID) + 4] = WAIT_TERMINAL;
        multipush(R0,R1,R2,R3,R4);
        call SCHEDULER;
        multipop(R0,R1,R2,R3,R4);
    endwhile ;
    [TERMINAL_STATUS_TABLE + 0] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    // print "going to print";
    // breakpoint;
    return;
endif ;

// Release terminal
if( functionNum == 9 ) then
    if( currentPID != [TERMINAL_STATUS_TABLE + 1] ) then
        R0 = -1;
        return;
    else
        [TERMINAL_STATUS_TABLE + 0] = 0;
        alias i R5;
        i = 0;
        while( i<16 ) do
            if( [PROCESS_TABLE + (16*i) +4] == WAIT_TERMINAL ) then
                [PROCESS_TABLE + (16*i) +4] = READY;
            endif;
            i = i + 1;
        endwhile ;
        R0 = 0;
        return;
    endif ;
endif;

// Acquire semaphore
if ( functionNum == 6 ) then
    alias i R3;
    i = 0;
    while ( i < 32 ) do 
        if ( [SEMAPHORE_TABLE + i*4 + 1] == 0 ) then
            [SEMAPHORE_TABLE + i*4 + 1] = 1;
            [SEMAPHORE_TABLE + i*4 + 0] = -1;
            break;
        endif;
        i = i+1;
    endwhile;

    if ( i==32 ) then
        R0 = -1;
        return;
    endif;

    R0 = i;
    return;
endif;

// Release semaphore
if ( functionNum == 7 ) then
    alias semIndex R2; 
    alias PID R3;

    if ( [SEMAPHORE_TABLE + semIndex*4 ] == 1) then
        [SEMAPHORE_TABLE + semIndex*4 ] = -1;

        alias i R4;
        i = 0;
        while (i<16) do
            if ( [PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE  && [PROCESS_TABLE + i*16 + 5] == semIndex) then
                [PROCESS_TABLE + i*16 + 4] = READY;
                [PROCESS_TABLE + i*16 + 5] = 0;
            endif;
            i = i + 1;
        endwhile;
    endif;
    [SEMAPHORE_TABLE + semIndex*4 + 1] = [SEMAPHORE_TABLE + semIndex*4 + 1] - 1;
    return;
endif;
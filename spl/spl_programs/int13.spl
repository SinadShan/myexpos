// number of switches to kernel module
[72*512 + 3] = [72*512 + 3] + 1;

// extract sys call number from user stack
alias userSP R1;
alias sysCallNumber R2;

userSP = SP;
sysCallNumber =[[PTBR + 2*(userSP - 5)/512]*512 + (userSP - 5)%512];

// switch to kernel stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 +13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +11]*512 -1;

// SEMGET
if (sysCallNumber == 17) then
    // set mode flag
    [ PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 17;
    alias i R3;
    i = 0;
    while (i<8) do
        if( [([ PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]+1)*512 - 16 + i*2] == -1 ) then
            break;
        endif;
        i = i+1;
    endwhile;

    // Acquire semaphore
    multipush(R1,R2,R3);
    R1 = 6;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3);

    // store semaphore table index value in resource table free entry
    [([ PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]+1)*512 - 16 + i*2 + 1] = R0;

    // store return value
    [[PTBR + 2*(userSP - 1)/512]*512 + (userSP - 1)%512] = i;
endif;

// SEMRELEASE
if ( sysCallNumber == 18) then
    // set mode flag
    [ PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 18;

    alias semID R3;
    semID = [[PTBR + 2*(userSP - 4)/512]*512 + (userSP - 4)%512];

    // check if semID is valid

    // Release semaphore
    multipush(R1,R2,R3);
    R1 = 7;
    R2 = [([ PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]+1)*512 - 16 + semID*2 + 1];
    R3 = [SYSTEM_STATUS_TABLE + 1]; 

    call RESOURCE_MANAGER; 
    multipop(R1,R2,R3);

    [([ PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]+1)*512-16 + semID*2 ] = -1;
endif;

// switch to user stack
SP = userSP;
ireturn;
// Read Interrupt

// // number of switches to kernel module
// [75*512 + 3] = [75*512 + 3] + 1;

alias currentPID R9;
currentPID = [SYSTEM_STATUS_TABLE + 1];
[ PROCESS_TABLE + 16*currentPID + 9] = 7;

alias userSP R1;
userSP=SP;

alias word_address R7;
word_address = [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];

[ PROCESS_TABLE + 16*currentPID + 13] = SP;
SP = [PROCESS_TABLE + 16*currentPID +11]*512 -1;

alias fileDescriptor R2;
alias fileDescPhysicalAddr R3;
fileDescPhysicalAddr = [(PTBR + 2*((userSP - 4)/512))]*512 + (userSP - 4)%512;
fileDescriptor = [fileDescPhysicalAddr];

// reading from terminal
if ( fileDescriptor == -1) then

    multipush(R9,R1,R2,R3,R7);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = word_address; 
    call DEVICE_MANAGER;
    multipop(R9,R1,R2,R3,R7);

    // set return value to 0 indicating success
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;

else

    if(fileDescriptor > 7 || fileDescriptor < -1) then
        alias physicalAddrRetVal R4;
        physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
        [physicalAddrRetVal] = -1;
        [ PROCESS_TABLE + 16*currentPID + 9] = 0;
        SP = userSP;
        ireturn;

    else
		// invalid fileDescriptor
        if ( [[PROCESS_TABLE + currentPID*16 + 11]*512 + RESOURCE_TABLE_OFFSET + fileDescriptor*2] != 0) then
            print("Bad file format");
            alias physicalAddrRetVal R4;
            physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
            [physicalAddrRetVal] = -1;
			[ PROCESS_TABLE + 16*currentPID + 9 ] = 0;
            SP = userSP;
            ireturn;
        endif;

        alias openFileIndex R4;
        alias inodeIndex R5;
        openFileIndex = [[PROCESS_TABLE + currentPID*16 + 11]*512 + RESOURCE_TABLE_OFFSET + fileDescriptor*2 + 1];
        inodeIndex = [OPEN_FILE_TABLE + openFileIndex*4 + 0];

        // Acquire Inode
        multipush(R9,R1,R2,R3,R4,R5,R7);
        R1 = 4;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 1]; 
        call RESOURCE_MANAGER;
        multipop(R9,R1,R2,R3,R4,R5,R7);

        if (R0 == -1) then
            // Acquire Inode failed
            alias physicalAddrRetVal R6;
            physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
            [physicalAddrRetVal] = -1;
			[ PROCESS_TABLE + 16*currentPID + 9] = 0;
            SP = userSP;
            ireturn;
        endif;

        alias lseek R6;
        lseek = [OPEN_FILE_TABLE + openFileIndex*4 + 2];

        if (inodeIndex == INODE_ROOT) then
            if (lseek == 408) then

				// Release Inode
				multipush(R9,R1,R2,R3,R4,R5,R6,R7);
				R1 = 5;
				R2 = inodeIndex;
				R3 = [SYSTEM_STATUS_TABLE + 1]; 
				call RESOURCE_MANAGER;
				multipop(R9,R1,R2,R3,R4,R5,R6,R7);

				[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -2;
				[ PROCESS_TABLE + 16*currentPID + 9] = 0;
				SP = userSP;
				ireturn;

            endif;

			[[PTBR + 2 * (word_address/ 512)] * 512 + (word_address % 512)] = [ ROOT_FILE + lseek];

			// increment lseek
			[OPEN_FILE_TABLE + openFileIndex*4 + 2] = lseek + 1;

		else
			if (lseek == [INODE_TABLE + inodeIndex*16 + 2]) then
				// Release Inode
				multipush(R9,R1,R2,R3,R4,R5,R6,R7);
				R1 = 5;
				R2 = inodeIndex;
				R3 = [SYSTEM_STATUS_TABLE + 1]; 
				call RESOURCE_MANAGER;
				multipop(R9,R1,R2,R3,R4,R5,R6,R7);

				[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -2;
				SP = userSP;
				ireturn;
			endif;

			// Buffered Read
			multipush(R9,R1,R2,R3,R4,R5,R6,R7);
			R1 = 2;
			R2 = [INODE_TABLE + inodeIndex*16 + 8 + lseek/512];
			R3 = lseek%512;
			R4 = word_address;
			call FILE_MANAGER;
			multipop(R9,R1,R2,R3,R4,R5,R6,R7);

			// increment lseek
			[OPEN_FILE_TABLE + openFileIndex*4 + 2] = lseek + 1;

        endif;

		// Release Inode
        multipush(R9,R1,R2,R3,R4,R5,R7);
        R1 = 5;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 1]; 
        call RESOURCE_MANAGER;
        multipop(R9,R1,R2,R3,R4,R5,R7);

    endif;
endif;

// reset mode flag to 0
[ PROCESS_TABLE + 16*currentPID + 9] = 0;

alias physicalAddrRetVal R6;
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
[physicalAddrRetVal] = 0;

SP = userSP;
ireturn;